/**
 * @fileOverview Middleware for running the servlet filter
 * chain so that Spring MVC processes the request.
 *
 * There is a single configuration parameter "capture"
 * which determines whether we buffer the output of the
 * servlet chain (e.g. so that javascript can manipulate the
 * response generated by spring), or whether that output
 * streams directly to the client without being buffered.
 *
 * The intent is for this middleware to be configured
 * last in the middleware chain, *after* the route
 * middleware.
 *
 * This way any requests not explicitly matching a ringo
 * app.get/app.post/etc. will automatically be handed
 * to the java servlet filter chain for processing by
 * Spring MVC.
 *
 * Note: the alternative is just to always include "*" app.get/post/etc.
 *   handlers at the end of your "controller"/"action" module files.
 *
 * @example
 * app.configure("notfound","error", "route", "runfilterchain");
 */

var utils = require("springoutils");
var {Response} = require('ringo/webapp/response');
var log = require("ringo/logging").getLogger("runfilterchain");

/**
 * Stick middleware forwarding unhandled requests to the Spring request dispatcher.
 * @param {Function} next the wrapped middleware chain
 * @param {Object} app the Stick Application object
 * @returns {Function} a JSGI response object
 */
exports.middleware = function runfilterchain(next, app) {

	app.runfilterchain = {
		// capture the stream by default so we can manipulate the response:
		capture: true
	};

	return function runfilterchain(request) {
		return utils.runFilterChain(request, app.runfilterchain.capture);
	}

};
